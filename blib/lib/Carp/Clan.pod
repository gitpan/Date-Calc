
=head1 NAME

Carp::Clan - Report errors from perspective of caller of a "clan" of modules

=head1 SYNOPSIS

 carp    - warn of errors (from perspective of caller)

 cluck   - warn of errors with stack backtrace

 croak   - die of errors (from perspective of caller)

 confess - die of errors with stack backtrace

    use Carp::Clan qw(^MyClan::);
    croak "We're outta here!";

    use Carp::Clan;
    confess "This is how we got here!";

=head1 DESCRIPTION

This module is based on Carp.pm from Perl 5.005_03. It has been
modified to skip all package names matching the pattern given in
the "use" statement inside the "qw()" term. Suppose you have a family
of modules or classes named Pack::A, Pack::B and so on, and each of
them uses Carp::Clan qw(^Pack::);. Thus when for example your script
tool.pl calls module Pack::A, and module Pack::A calls module Pack::B,
an exception raised in module Pack::B will appear to have originated
in tool.pl where Pack::A was called, and not in Pack::A where Pack::B
was called, as the unmodified Carp.pm would try to make you believe
C<:-)>. This works similarly if Pack::B calls Pack::C where the
exception is raised, etcetera.

In other words, this blames all errors in the Pack::* modules on
the user of these modules, i.e., on you. C<;-)>

The skipping of a clan (or family) of packages according to a pattern
describing its members (in addition to skipping all related classes, as
determined by the @ISA array) is necessary in cases where these modules
are not classes derived from each other (and thus when examining @ISA
doesn't help).

The purpose and advantage of this is that a "clan" of modules may work
together (and call each other) and throw exceptions at various depths
down the calling hierarchy and still appear as a monolithic block (as
though they were a single module) from the perspective of the caller.

=head2 Forcing a Stack Trace

As a debugging aid, you can force Carp::Clan to treat a croak as
a confess and a carp as a cluck. In other words, force a detailed
stack trace to be given. This can be very helpful when trying to
understand why, or from where, a warning or error is being generated.

This feature is enabled by 'importing' the non-existent symbol
'verbose'. You would typically enable it by saying

    use Carp::Clan qw(verbose);

You can either specify a "family pattern" inside the "qw()" term _OR_
the string "verbose" - a pattern of packages to skip is pointless when
"verbose" causes a full stack trace anyway.

You can force the verbose option for _ALL_ modules currently using
Carp::Clan by setting the global variable C<$Carp::Clan::Verbose>
to true.

=head1 BUGS

The Carp::Clan routines don't handle exception objects currently.
If called with a first argument that is a reference, they simply
call die() or warn(), as appropriate.

